package com.checkout.handlepaymentsandpayouts.payments.common.source.knetsource;

import com.checkout.handlepaymentsandpayouts.payments.common.source.AbstractSource;
import com.checkout.handlepaymentsandpayouts.payments.common.source.SourceType;
import com.google.gson.annotations.SerializedName;

import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

/**
 * knet source Class
 * The source of the payment
 */
@Getter
@Setter
@EqualsAndHashCode(callSuper = true)
@ToString(callSuper = true)
public final class KnetSource extends AbstractSource {

    /**
     * Required for KNet Gateway payments.
     * This field enables the issuer's site to select the consumer's preferred language. For example, the language
     * selected on the merchant's site â€“ if the issuer's site supports it. Code list in accordance with ISO 639-1.
     * (Arabic = 'ar', English = 'en'). Note that 'ar' corresponds to 'ARA' and 'en' to 'USA'. Both values accepted by
     * KNet Gateway.
     * [Optional]
     */
    private LanguageType language;

    /**
     * User-defined field that can be used to pass and store any additional transaction data required to be archived
     * with the transaction and available as a searching criterion. Only alphanumeric characters and spaces are allowed.
     * [Optional]
     */
    @SerializedName("user_defined_field1")
    private String userDefinedFieldOne;

    /**
     * User-defined field can be used to pass and store any additional transaction data required to be archived with the
     * transaction and available as a searching criterion. Only alphanumeric characters and spaces are allowed.
     * [Optional]
     */
    @SerializedName("user_defined_field2")
    private String userDefinedFieldTwo;

    /**
     * User-defined field can be used to pass and store any additional transaction data required to be archived with the
     * transaction and available as a searching criterion. Only alphanumeric characters and spaces are allowed. Note
     * that this field must be omitted when the card_token field is not empty. This restriction exists because a card
     * token is passed to KNet Gateway as user_defined_field3.
     * [Optional]
     */
    @SerializedName("user_defined_field3")
    private String userDefinedFieldThree;

    /**
     * User-defined field can be used to pass and store any additional transaction data required to be archived with the
     * transaction and available as a searching criterion. Only alphanumeric characters and spaces are allowed.
     * [Optional]
     */
    @SerializedName("user_defined_field4")
    private String userDefinedFieldFour;

    /**
     * User-defined field can be used to pass and store any additional transaction data required to be archived with the
     * transaction and available as a searching criterion. Only alphanumeric characters and spaces are allowed. Note
     * that this field must be omitted when the ptlf field is not empty. This restriction exists because a PTLF value is
     * passed to KNet Gateway as user_defined_field5.
     * [Optional]
     */
    @SerializedName("user_defined_field5")
    private String userDefinedFieldFive;

    /**
     * This token allows re-usage of card details for multiple payments. This 8-digit token should be generated by a
     * merchant. When a subsequent payment is initialized with the same card token, a customer is presented with two
     * options. The customer can choose to pay with KFast (doesn't need to enter card details again), or with KNet as
     * usual. The payment flow stays the same i.e. a merchant should redirect a customer to the redirect URL which is
     * provided in the payment creation response. Note that user_defined_field3 must be omitted when the card_token
     * field is not empty. This restriction exists because a card token is passed to KNet Gateway as
     * user_defined_field3.
     * [Optional]
     * ^[0-9]{8}$
     */
    @SerializedName("card_token")
    private String cardToken;

    /**
     * This is an ID for merchant PTLF functionality tracking. Only alphanumeric characters are allowed. Note that
     * user_defined_field5 must be omitted when the ptlf field is not empty. This restriction exists because a PTLF
     * value is passed to KNet Gateway as user_defined_field5.
     * [Optional]
     * &lt;= 45
     */
    private String ptlf;

    /**
     * The payment identifier assigned by KNet Gateway.
     * [Optional]
     */
    @SerializedName("knet_payment_id")
    private String knetPaymentId;

    /**
     * The state of the payment, returned by KNet Gateway after the customer is redirected from the payment page.
     * [Optional]
     */
    @SerializedName("knet_result")
    private String knetResult;

    /**
     * The state of the payment, returned by KNet Gateway in the response from the payment inquiry. This field is
     * populated in rare cases when the redirection from the payment page did not occur properly.
     * [Optional]
     */
    @SerializedName("inquiry_result")
    private String inquiryResult;

    /**
     * The result transaction reference, given by some banks/institutions.
     * [Optional]
     */
    @SerializedName("bank_reference")
    private String bankReference;

    /**
     * The transaction identifier assigned by KNet Gateway.
     * [Optional]
     */
    @SerializedName("knet_transaction_id")
    private String knetTransactionId;

    /**
     * The resulting authorization code from the issuing bank.
     * [Optional]
     */
    @SerializedName("auth_code")
    private String authCode;

    /**
     * The auth response code / reason code relating to the issuing bank authorization code.
     * [Optional]
     */
    @SerializedName("auth_response_code")
    private String authResponseCode;

    /**
     * The transaction date in the authorization system format, with the value defined by the issuing bank, so may not
     * match the actual transaction date. The format is MMDD.
     * [Optional]
     */
    @SerializedName("post_date")
    private String postDate;

    /**
     * The Address Verification Response returned from the address verification service.
     * [Optional]
     */
    private String avr;

    /**
     * The KNET error code for transaction processing.
     * [Optional]
     */
    private String error;

    /**
     * The KNET text detail for the error, including an error code.
     * [Optional]
     */
    @SerializedName("error_text")
    private String errorText;

    /**
     * Initializes a new instance of the KnetSource class.
     */
    @Builder
    private KnetSource(
        final LanguageType language,
        final String userDefinedFieldOne,
        final String userDefinedFieldTwo,
        final String userDefinedFieldThree,
        final String userDefinedFieldFour,
        final String userDefinedFieldFive,
        final String cardToken,
        final String ptlf,
        final String knetPaymentId,
        final String knetResult,
        final String inquiryResult,
        final String bankReference,
        final String knetTransactionId,
        final String authCode,
        final String authResponseCode,
        final String postDate,
        final String avr,
        final String error,
        final String errorText
    ) {
        super(SourceType.KNET);
        this.language = language;
        this.userDefinedFieldOne = userDefinedFieldOne;
        this.userDefinedFieldTwo = userDefinedFieldTwo;
        this.userDefinedFieldThree = userDefinedFieldThree;
        this.userDefinedFieldFour = userDefinedFieldFour;
        this.userDefinedFieldFive = userDefinedFieldFive;
        this.cardToken = cardToken;
        this.ptlf = ptlf;
        this.knetPaymentId = knetPaymentId;
        this.knetResult = knetResult;
        this.inquiryResult = inquiryResult;
        this.bankReference = bankReference;
        this.knetTransactionId = knetTransactionId;
        this.authCode = authCode;
        this.authResponseCode = authResponseCode;
        this.postDate = postDate;
        this.avr = avr;
        this.error = error;
        this.errorText = errorText;
    }

    public KnetSource() {
        super(SourceType.KNET);
    }

}
