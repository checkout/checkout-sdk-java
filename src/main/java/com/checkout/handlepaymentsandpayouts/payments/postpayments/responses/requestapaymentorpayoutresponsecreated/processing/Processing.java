package com.checkout.handlepaymentsandpayouts.payments.postpayments.responses.requestapaymentorpayoutresponsecreated.processing;

import com.google.gson.annotations.SerializedName;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

/**
 * processing
 * Returns information related to the processing of the payment
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public final class Processing {

    /**
     * A unique identifier for the authorization that is submitted to the card scheme during processing
     * [Optional]
     */
    @SerializedName("retrieval_reference_number")
    private String retrievalReferenceNumber;

    /**
     * A unique identifier for the transaction generated by the acquirer
     * [Optional]
     */
    @SerializedName("acquirer_transaction_id")
    private String acquirerTransactionId;

    /**
     * A code representing the follow-up action to take with the payment, as recommended by Checkout.com
     * [Optional]
     */
    @SerializedName("recommendation_code")
    private String recommendationCode;

    /**
     * The scheme the transaction was processed with
     * [Optional]
     */
    private String scheme;

    /**
     * [BETA]
     * The Merchant Advice Code (MAC) provided by Mastercard, which contains additional information about the
     * transaction.
     * For example, the MAC can inform you if the transaction was performed using a consumer non-reloadable prepaid card
     * or a consumer single-use virtual card.
     * For declined transactions, the MAC will also let you know whether the payment can be retried, and how long you
     * should wait before doing so.
     * [Optional]
     */
    @SerializedName("partner_merchant_advice_code")
    private String partnerMerchantAdviceCode;

    /**
     * [BETA]
     * The original authorization response code sent by the scheme. This is also referred to as the raw response code.
     * This differs from the recommendation_code value, which is provided by Checkout.com and is standardized across all
     * schemes.
     * [Optional]
     */
    @SerializedName("partner_response_code")
    private String partnerResponseCode;

    /**
     * Unique order identification of an Afterpay payment
     * [Optional]
     */
    @SerializedName("partner_order_id")
    private String partnerOrderId;

    /**
     * Unique identification of a payment provided by partner
     * [Optional]
     */
    @SerializedName("partner_payment_id")
    private String partnerPaymentId;

    /**
     * Status of a payment provided by partner
     * [Optional]
     */
    @SerializedName("partner_status")
    private String partnerStatus;

    /**
     * Unique transaction identification provided by partner
     * [Optional]
     */
    @SerializedName("partner_transaction_id")
    private String partnerTransactionId;

    /**
     * Error codes provided by partner
     * [Optional]
     */
    @SerializedName("partner_error_codes")
    private List<String> partnerErrorCodes;

    /**
     * Error description provided by partner
     * [Optional]
     */
    @SerializedName("partner_error_message")
    private String partnerErrorMessage;

    /**
     * Authorization code provided by partner
     * [Optional]
     */
    @SerializedName("partner_authorization_code")
    private String partnerAuthorizationCode;

    /**
     * Authorization response code provided by partner
     * [Optional]
     */
    @SerializedName("partner_authorization_response_code")
    private String partnerAuthorizationResponseCode;

    /**
     * Surcharge amount applied to the transaction in minor units
     * [Optional]
     * &gt;= 0
     */
    @SerializedName("surcharge_amount")
    private Integer surchargeAmount;

    /**
     * The type of Primary Account Number (PAN) used for the payment. DPAN indicates network token was used, FPAN
     * indicates the full card was used
     * [Optional]
     */
    @SerializedName("pan_type_processed")
    private PanTypeProcessedType panTypeProcessed;

    /**
     * The flag indicating if Checkout Network Token was available for the payment
     * [Optional]
     */
    @SerializedName("cko_network_token_available")
    private Boolean ckoNetworkTokenAvailable;

}
