plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'io.freefair.lombok' version '8.10.2'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.apache.httpcomponents:httpmime:4.5.14'
    implementation 'commons-codec:commons-codec:1.15'

    testImplementation(platform('org.junit:junit-bom:5.11.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
    testImplementation 'org.apache.logging.log4j:log4j-api:2.25.2'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.25.2'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.25.2'
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.14'
}

test {
    systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "INFO"
    useJUnitPlatform()
    testLogging {
        events "passed", "failed", "skipped", "standardError"
        showStandardStreams = true
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name.set(project_name)
                packaging = 'jar'
                description.set(project_description)
                url.set(project_url)
                scm {
                    connection.set(project_scm)
                    developerConnection.set(project_scm)
                    url.set(project_url)
                }
                licenses {
                    license {
                        name.set(project_license_slug)
                        url.set(project_license_url)
                    }
                }
                developers {
                    developer {
                        id.set(project_developer)
                        name.set(project_developer)
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

signing {
    def signingKey = System.getenv('GPG_KEY')
    def signingPassword = System.getenv('GPG_PASSPHRASE')
    required { signingKey != null && signingPassword != null && gradle.taskGraph.hasTask("publish") }
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}

jar {
    manifest {
        attributes 'Implementation-Title': 'checkout-sdk-java',
                'Implementation-Version': archiveVersion.get()
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "checkout_checkout-sdk-java"
        property "sonar.organization", "checkout-ltd"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

tasks.withType(Test).configureEach {
    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
        }
    }
}
